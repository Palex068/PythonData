"""
Функция hide_card()
Реализуйте функцию hide_card(), которая принимает один аргумент:

card_number — строка, представляющая собой корректный номер банковской 
карты из 1616 цифр, между которыми могут присутствовать символы пробела
Функция должна заменять первые 1212 цифр в строке card_number на символ * 
и возвращать полученный результат. Если между цифрами в номере имелись 
символы пробела, их следует удалить.

Примечание 1. В тестирующую систему сдайте программу, содержащую только 
необходимую функцию hide_card(), но не код, вызывающий ее.

Примечание 2. Тестовые данные доступны по ссылкам:

Архив с тестами
https://stepik.org/media/attachments/lesson/569748/tests_2310066.zip
GitHub
https://github.com/python-generation/Professional/tree/main/Module_2/Module_2.1/Module_2.1.4

"""
# def hide_card(S):
#     result = '*' * 12 + ''.join(S.split())[-4:]
#     return result

# print(hide_card(input()))

"""
Функция same_parity()
Реализуйте функцию same_parity(), которая принимает один аргумент:

numbers — список целых чисел
Функция должна возвращать новый список, элементами которого являются числа из списка numbers, имеющие ту же четность, что и первый элемент этого списка.

Примечание 1. Числа в возвращаемом функцией списке должны располагаться в своем исходном порядке. 

Примечание 2. В тестирующую систему сдайте программу, содержащую только необходимую функцию same_parity(), но не код, вызывающий ее.

Примечание 3. Тестовые данные доступны по ссылкам:
https://stepik.org/media/attachments/lesson/569748/tests_2310059.zip
https://github.com/python-generation/Professional/tree/main/Module_2/Module_2.1/Module_2.1.5
"""

# def same_parity(nums):
#     if nums == []:
#         return []
#     else:
#         flag = nums[0] % 2
#         return list(filter(lambda x: x % 2 == flag, nums))

"""
Функция is_valid()
Будем считать, что PIN-код является корректным, если он удовлетворяет следующим условиям:

состоит из 4, 5 или 6 символов
состоит только из цифр (0-9)
не содержит пробелов
Реализуйте функцию is_valid(), которая принимает один аргумент:

string — произвольная строка
Функция должна возвращать значение True, если строка string представляет 
собой корректный PIN-код, или False в противном случае.

Примечание 1. Если в функцию передается пустая строка, функция должна возвращать значение False.

Примечание 2. В тестирующую систему сдайте программу, содержащую только 
необходимую функцию is_valid(), но не код, вызывающий ее.

Примечание 3. Тестовые данные доступны по ссылкам:
"""


# def is_valid(n):
#     return len(list(n.split())) == 1 and n.isdigit() and 3 < len(n) < 7


# n = input()
# print(is_valid(n))

"""
Функция print_given()
Реализуйте функцию print_given(), которая принимает произвольное количество 
позиционных и именованных аргументов и выводит все переданные аргументы, 
указывая тип каждого. Пары аргумент-тип должны выводиться каждая на отдельной строке, 
в следующем формате:

для позиционных аргументов:
<значение аргумента> <тип аргумента>
для именованных аргументов:
<имя переменной> <значение аргумента> <тип аргумента>

Примечание 1. При выводе позиционные аргументы должны быть расположены 
в порядке их передачи, именованные — в лексикографическом порядке имен переменных.

Примечание 2. При выводе сначала должны следовать все 
позиционные аргументы, затем — все именованные.

Примечание 3. Если в функцию ничего не передается, 
функция ничего не должна выводить.

Примечание 4. В тестирующую систему сдайте программу, содержащую только 
необходимую функцию print_given(), но не код, вызывающий ее.

Примечание 5. Тестовые данные доступны по ссылкам:
https://stepik.org/media/attachments/lesson/569748/tests_2757616.zip
https://github.com/python-generation/Professional/tree/main/Module_2/Module_2.1/Module_2.1.7
"""
# def print_given(*args, **kwargs):
#     for i in args:
#         print(f"{i} {type(i)}")
#     for i in sorted(kwargs):
#         print(f"{i} {kwargs[i]} {type(kwargs[i])}")
    

# print_given(print(print_given()))

"""
Функция convert()
Реализуйте функцию convert(), которая принимает один аргумент:

string — произвольная строка
Функция должна возвращать строку string:

полностью в нижнем регистре, если букв в нижнем регистре в этой строке больше
полностью в верхнем регистре, если букв в верхнем регистре в этой строке больше
полностью в нижнем регистре, если количество букв в верхнем и нижнем регистрах 
в этой строке совпадает
Примечание 1. Символы строки, не являющиеся буквами, следует игнорировать.

Примечание 2. В тестирующую систему сдайте программу, содержащую только необходимую 
функцию convert(), но не код, вызывающий ее.

Примечание 3. Тестовые данные доступны по ссылкам:
https://github.com/python-generation/Professional/tree/main/Module_2/Module_2.1/Module_2.1.8
"""

# def convert(S):
#     flag = 0
#     for s in S:
#         if s.isalpha() and s.islower():
#             flag -= 1
#         elif s.isalpha():
#             flag += 1
#     return S.lower() if flag <= 0 else S.upper()

# print(convert('ABCdef123'))

"""
Функция filter_anagrams()
Анаграммы — это слова, которые состоят из одинаковых букв. Например:

адаптер — петарда
адресочек — середочка
азбука — базука
аистенок — осетинка
Реализуйте функцию filter_anagrams(), которая принимает два аргумента в следующем порядке:

word — слово в нижнем регистре
words — список слов в нижнем регистре
Функция должна возвращать список, элементами которого являются слова из списка words, 
которые представляют анаграмму слова word. Если список words пуст или не содержит анаграмм, 
функция должна вернуть пустой список.

Примечание 1. Слова в возвращаемом функцией списке должны располагаться в своем исходном порядке. 

Примечание 2. Считайте, что слово является анаграммой самого себя.

Примечание 3. В тестирующую систему сдайте программу, содержащую только необходимую функцию filter_anagrams(), но не код, вызывающий ее.

Примечание 4. Тестовые данные доступны по ссылкам:
"""
# def get_W(word):
#     W = dict()
#     for w in set(list(word)):
#         W.setdefault(w, word.count(w))
#     return W


# def filter_anagrams(word, words):
#     W = get_W(word)
#     result = list(w for w in words if get_W(w) == W)
#     return result

# def filter_anagrams(word, words):
#     return [w for w in words if sorted(list(w)) == sorted(list(word))]

"""
Функция likes()
В различных социальных сетях существуют системы лайков, которые в зависимости 
от количества людей, оценивших запись, показывают соответствующую информацию.

Реализуйте функцию likes(), которая принимает один аргумент:

names — список имён
Функция должна возвращать строку в соответствии с примерами ниже, 
содержание которой зависит от количества имён в списке names.

Приведенный ниже код:

print(likes([]))
print(likes(['Тимур']))
print(likes(['Тимур', 'Артур']))
print(likes(['Тимур', 'Артур', 'Руслан']))
print(likes(['Тимур', 'Артур', 'Руслан', 'Анри']))
print(likes(['Тимур', 'Артур', 'Руслан', 'Анри', 'Дима']))
print(likes(['Тимур', 'Артур', 'Руслан', 'Анри', 'Дима', 'Рома', 'Гвидо', 'Марк']))
должен выводить:

Никто не оценил данную запись
Тимур оценил(а) данную запись
Тимур и Артур оценили данную запись
Тимур, Артур и Руслан оценили данную запись
Тимур, Артур и 2 других оценили данную запись
Тимур, Артур и 3 других оценили данную запись
Тимур, Артур и 6 других оценили данную запись

Примечание 1. Имена в формируемой и возвращаемой функцией строке должны располагаться в своем исходном порядке.

Примечание 2. Обратите внимание, что если в передаваемом в функцию списке более трех имен, то явно указываются лишь первые два из них. 

Примечание 3. В тестирующую систему сдайте программу, содержащую только необходимую функцию likes(), но не код, вызывающий ее.

Примечание 4. Тестовые данные доступны по ссылкам:
https://github.com/python-generation/Professional/tree/main/Module_2/Module_2.1/Module_2.1.10

"""
# def likes(names):
#     ln = len(names)
#     if names == []:
#         return "Никто не оценил данную запись"
#     elif ln == 1:
#         return f"{names[0]} оценил(а) данную запись"
#     elif ln == 2:
#         return f"{names[0]} и {names[1]} оценили данную запись"
#     elif ln == 3:
#         return f"{names[0]}, {names[1]} и {names[2]} оценили данную запись"
#     elif ln > 3:
#         return f"{names[0]}, {names[1]} и {ln - 2} других оценили данную запись"

# print(likes([]))
# print(likes(['Тимур']))
# print(likes(['Тимур', 'Артур']))
# print(likes(['Тимур', 'Артур', 'Руслан']))
# print(likes(['Тимур', 'Артур', 'Руслан', 'Анри']))
# print(likes(['Тимур', 'Артур', 'Руслан', 'Анри', 'Дима']))
# print(likes(['Тимур', 'Артур', 'Руслан', 'Анри', 'Дима', 'Рома', 'Гвидо', 'Марк']))

# names = [str(i) * 3 for i in range(100)]
# print(likes(names))

"""
Функция index_of_nearest()
Реализуйте функцию index_of_nearest(), которая принимает два аргумента в следующем порядке:

numbers — список целых чисел
number — целое число
Функция должна находить в списке numbers ближайшее по значению число к числу number и 
возвращать его индекс. Если список numbers пуст, функция должна вернуть число -1.

Примечание 1. Если в функцию передается список, содержащий несколько чисел, одновременно
 являющихся ближайшими к искомому числу, функция должна возвращать наименьший из индексов ближайших чисел.

Примечание 2. Рассмотрим третий тест. Ближайшими числами к числу 4 являются 5 и 3, 
имеющие индексы 1 и 2 соответственно. Наименьший из индексов равен 1.

Примечание 3. В тестирующую систему сдайте программу, содержащую только 
необходимую функцию index_of_nearest(), но не код, вызывающий ее.

Примечание 4. Тестовые данные доступны по ссылкам:
https://github.com/python-generation/Professional/tree/main/Module_2/Module_2.1/Module_2.1.11
"""
# import numpy as np
# def index_of_nearest(numbers, number):
#     if numbers:
#         return numbers.index(min((np.array(numbers) - number), key=abs) + number)
#     return -1

# def index_of_nearest(nums, n):
#     if nums:
#         minimum = min(nums, key=lambda num: abs(num - n))
#         return nums.index(minimum)
#     return -1

# print(index_of_nearest([], 17))
# print(index_of_nearest([7, 13, 3, 5, 18], 0))
# print(index_of_nearest([9, 5, 3, 2, 11], 4))
# print(index_of_nearest([7, 5, 4, 4, 3], 4))

"""
Функция spell()
Реализуйте функцию spell(), которая принимает произвольное количество позиционных аргументов-слов и возвращает словарь, ключи которого — первые буквы слов, а значения — максимальные длины слов на эту букву.

Примечание 1. Если в функцию не передается ни одного аргумента, функция должна возвращать пустой словарь.

Примечание 2. Функция должна игнорировать регистр слов, при этом в результирующий словарь должны попасть именно буквы в нижнем регистре.

Примечание 3. В тестирующую систему сдайте программу, содержащую только необходимую функцию, но не код, вызывающий ее.

Примечание 4. Тестовые данные доступны по ссылкам:
https://github.com/python-generation/Professional/tree/main/Module_2/Module_2.1/Module_2.1.12
"""

# def spell(*args):
#     result = dict()
#     for w in args:
#         if w[0].lower() not in result:
#             result.setdefault(w[0].lower(), len(w))
#         if w[0].lower() in result and len(w) > result[w[0].lower()]:
#             result[w[0].lower()] = len(w)
        
#     return result

# def spell(*args):
#     result = {}
#     for word in args:
#         if result.get(word[0].lower(), 0) < len(word):
#             result[word[0].lower()] = len(word)
#     return result

# words = ['россия', 'Австрия', 'австралия', 'РумыниЯ', 'Украина', 'КИТай', 'УЗБЕКИСТАН']

# print(spell(*words))
# print(spell('Математика', 'История', 'химия', 'биология', 'Информатика'))

# words = ['fruit', 'football', 'February', 'forest', 'Family']
# print(spell(*words))

"""
Функция choose_plural() 🌶️🌶️
Реализуйте функцию choose_plural(), которая принимает два аргумента в следующем порядке:

amount — натуральное число, количество
declensions — кортеж из трех вариантов склонения существительного
Функция должна возвращать строку, полученную путем объединения подходящего существительного
из кортежа declensions и количества amount, в следующем формате:

<количество> <существительное>

Примечание 1. Передаваемый в функцию кортеж легко составить по мнемоническому правилу: один, два, пять. Например:

для слова «арбуз»: арбуз, арбуза, арбузов
для слова «рубль»: рубль, рубля, рублей
Примечание 2. В тестирующую систему сдайте программу, содержащую только необходимую функцию choose_plural(), но не код, вызывающий ее.

Примечание 3. Тестовые данные доступны по ссылкам:
"""

# def choose_plural(amount, declensions):
#     if amount % 100 in range(11, 20):
#         return f"{amount} {declensions[2]}"
#     elif amount % 10 == 1:
#         return f"{amount} {declensions[0]}"
#     elif amount % 10 in range(2,5):
#         return f"{amount} {declensions[1]}"
#     else:
#         return f"{amount} {declensions[2]}"


# print(choose_plural(21, ('пример', 'примера', 'примеров')))
# print(choose_plural(92, ('гвоздь', 'гвоздя', 'гвоздей')))
# print(choose_plural(8, ('яблоко', 'яблока', 'яблок')))
# print(choose_plural(111223, ('копейка', 'копейки', 'копеек')))
# print(choose_plural(763434, ('рубль', 'рубля', 'рублей')))
# print(choose_plural(512312, ('цент', 'цента', 'центов')))
# print(choose_plural(59, ('помидор', 'помидора', 'помидоров')))


"""
Функция get_biggest() 🌶️🌶️
Реализуйте функцию get_biggest(), которая принимает один аргумент:

numbers — список целых неотрицательных чисел
Функция должна возвращать наибольшее число, которое можно составить 
из чисел из списка numbers. Если список numbers пуст, функция должна вернуть число -1.

Примечание 1. Рассмотрим первый тест со списком чисел [1, 2, 3], из которых можно составить следующие числа:
123, 132, 213, 231, 312, 321

Наибольшим из представленных является 321.

Примечание 2. В тестирующую систему сдайте программу, содержащую только необходимую функцию get_biggest(), но не код, вызывающий ее.

Примечание 3. Тестовые данные доступны по ссылкам:
https://github.com/python-generation/Professional/tree/main/Module_2/Module_2.1/Module_2.1.14
"""
# def get_biggest(numbers):
#     if numbers:
#         nums = list(str(n) for n in numbers)
#         maxlen = len(sorted(nums, key=len)[-1])
#         result = int(''.join(sorted(nums, key=lambda x: x * maxlen, reverse=True)))
#         return result
#     return -1

# print(get_biggest([1, 2, 3]))
# print(get_biggest([61, 228, 9, 3, 11]))
# print(get_biggest([7, 71, 72]))
# print(get_biggest([]))
# print(get_biggest([0, 0, 0, 0, 0, 0]))
# print(get_biggest([13, 221, 423, 53, 1, 2, 33, 58, 78554, 34, 65, 65, 2, 1]))
# 78554 65 65 58 53 423 34 33 2 2 221 13 11
# 78554 65 65 58 53 423 34 33 2 2 221 11 13


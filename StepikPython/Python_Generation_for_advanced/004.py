# list = ['планиметрия', 'стереометрия', 'задача с параметром', 'экономическая задача', 'задача на теорию чисел']
# list.append('уравнение')
# list.remove(list[2])
# list.append('неравенство')
# list.remove(list[0])
# print(list)


# list1 = ['a', 'b', 'c', 'd']
# list2 = ['e', 'f', 'g']
# list3 = list1 + list2
# print(list3)
# list1.extend(list2)
# print(list3)

# zeros = [0] * 10
# print(len(zeros))

# numbers = [10, 20, 30, 40, 50]
# print(numbers[-2])
# print(numbers[-4:-1])

# numbers = [10, 20, 30, 40, 50, 60, 70, 80]
# print(numbers[2:5])
# print(numbers[:4])
# print(numbers[3:])

# numbers = [4, 8, 12, 16, 34, 56, 100]
# numbers[1:4] = [20, 24, 28]
# print(numbers)

# numbers = [5, 10, 15, 25]
# print(numbers[::-2])

# numbers = [10, 20, 30, 40, 50]
# numbers.append(60)
# print(numbers)

# numbers.append(60)
# print(numbers)

# numbers = [10, 20, 30, 40, 50]
# numbers.pop()
# print(numbers)

# numbers.pop(2)
# print(numbers)


# letters = ['a', 'b', 'c', 'd']
# new_letters = letters.copy()
# print(new_letters)
# new_letters = new_letters.copy(letters)
# print(new_letters)
# new_letters = letters[:]
# print(new_letters)
# new_letters = list(letters)
# print(new_letters)
# new_letters = copy(letters)
# print(new_letters)

# words = ['Hello', 'Python']
# print('-'.join(words))

# numbers = [10, 20, 30, 40]
# del numbers[0:6]
# print(numbers)

# words = ['xyz', 'zara', 'beegeek']
# print(max(words))

# numbers = [1, 2, 3, 4, 5, 6, 7]
# new_numbers =  [2 * x for x in numbers]
# print(new_numbers)

# list1 = [[1, 8, 9], [4, 8, 12, 16], [0, 2, 7]]
# print(list1[0][1] + list1[1][2] + list1[2][2])

# list1 = [[1, 8, 9], [4, 8, 12, 16], [0, 2, 7]]
# print(list1[0][1] + list1[3][2] + list1[2][2])

# list1 = ['Beegeek', [4, 8, 12, 16]]
# print(list1[0][1])
# print(list1[1][3])

# list1 = [[0, [9, 2]], [1, [4, 6, 3], [5, 2, 3], 8, 3]]
# print(list1[1][2][1])

# list1 = [[1, 2, 3], [4, 5], [8], [1, 2, 3, 4]]
# print(len(list1))

# list1 = [[[1, 1, 0], [0, 1, 1]], [[0, 1], [1, 1], [1, 0]]]
# print(len(list1))

# list1 = [[1, 8, 7, 4], [1, 3, 4, 5], [2, 7, 2], [2, 6, 7, 8]]
# list1.reverse()
# print(list1)

# list1 = [[1, 8, 7, 4], [1, 3, 4, 5, 6], [2, 7, 2], [2, 6, 7, 8]]
# print(max(list1))

# list1 = [[1, 8, 7, 4], [1, 3, 4, 5, 6], [2, 7, 2], [2, 6, 7, 8]]
# del list1[1]
# print(list1)

# list1 = [[1, 8, 7, 4], [1, 3, 4, 5, 6], [2, 7, 2], [2, 6, 7, 8]]
# del list1[1][1]
# print(list1)

"""
Дополните приведенный код, используя списочный метод append(), 
чтобы список list1 имел вид:

list1 = [10, 20, [300, 400, [5000, 6000, 7000], 500], 30, 40]
"""

# list1 = [10, 20, [300, 400, [5000, 6000], 500], 30, 40]

# list1[2][2].append(7000)
# print(list1)

"""
Дополните приведенный код, используя списочный метод extend(), чтобы список list1 имел вид:

list1 = ['a', 'b', ['c', ['d', 'e', ['f', 'g', 'h', 'i', 'j'], 'k'], 'l'], 'm', 'n']
Подсписок для расширения  sub_list = ['h', 'i', 'j'].
"""

# list1 = ['a', 'b', ['c', ['d', 'e', ['f', 'g'], 'k'], 'l'], 'm', 'n']
# sub_list = ['h', 'i', 'j']
# list1[2][1][2].extend(sub_list)
# print(list1)

"""
Дополните приведенный код, используя цикл for и встроенную функцию max(), 
чтобы он выводил один общий максимальный элемент среди всех элементов вложенных списков list1.
"""

# list1 = [[1, 7, 8], [9, 7, 102], [6, 106, 105], [100, 99, 98, 103], [1, 2, 3]]
# maximum = -1
# result = []
# for i in list1:
#     result.extend(i)
# print(max(result))

"""
Дополните приведенный код так, чтобы список list1 имел вид:

list1 = [[8, 7, 1], [102, 7, 9], [105, 106, 102], [103, 98, 99, 100], [3, 2, 1]]
"""

# list1 = [[1, 7, 8], [9, 7, 102], [102, 106, 105], [100, 99, 98, 103], [1, 2, 3]]
# for i in range(len(list1)):
#     list1[i] = list1[i][::-1]
# print(list1)

"""
Дополните приведенный код так, чтобы он выводил единственное число: 
сумму всех чисел списка list1 разделённую на общее количество всех чисел.

Подсказка
Используйте встроенные функции sum() и len() для нахождения суммы всех элементов и их количества. 
"""
# list1 = [[1, 7, 8], [9, 7, 102], [102, 106, 105], [100, 99, 98, 103], [1, 2, 3]]
# result = []
# for i in list1:
#     result.extend(i)
# print(sum(result) / len(result))

# list1 = [[1, 2, 3], [4, 5]]
# list2 = list1

# list1[0].append(7)

# print(list2)

# list1 = [[1] * 3] * 3
# list1[0][1] = 5
# print(list1[1][1])

# n = 3
# list1 = []

# for _ in range(n):
#     row = input().split()
#     list1.extend(row)

# print(list1)

# my_list = [[1], [2, 3], [4, 5, 6]]
# total = 0

# for row in my_list:
#     total += sum(row)
#     print(type(row))

# print(total)

# my_list = [[12, 221, 3], [41, 5, 633], [71, 8, 99]]

# maximum = my_list[0][0]
# minimum = my_list[0][0]

# for row in my_list:
#     maximum = max(row)
#     minimum = min(row)
# print(maximum)
# print(minimum)
# print(maximum + minimum)

# my_list = [[12, 221, 3], [41, 5, 633], [71, 8, 99]]

# maximum = my_list[0][0]
# minimum = my_list[0][0]

# for row in my_list:
#     if max(row) > maximum:
#         maximum = max(row)
#     if min(row) < minimum:
#         minimum = min(row)

# print(maximum + minimum)

"""
Список по образцу 1
На вход программе подается число nn. Напишите программу, которая создает и выводит построчно список, 
состоящий из n списков [[1, 2, ..., n], [1, 2, ..., n], ..., [1, 2, ..., n]].

Формат входных данных
На вход программе подается натуральное число nn.

Формат выходных данных
Программа должна вывести построчно указанный список.
"""

# n = int(input())
# matrix = [list(range(1, n + 1)) for _ in range(n)]
# print(*matrix, sep='\n')
# [[print([i+1 for i in range(n)]) for _ in range(n)] for n in [int(input())]]

"""
Список по образцу 2
На вход программе подается число nn. Напишите программу, 
которая создает и выводит построчно вложенный список, 
состоящий из nn списков [[1], [1, 2], [1, 2, 3], ..., [1, 2, ..., n]].

Формат входных данных
На вход программе подается натуральное число nn.

Формат выходных данных
Программа должна вывести построчно указанный вложенный список.
"""
# n = int(input())
# result = []
# for i in range(1, n + 1):
#     result.append(list(range(1, i + 1)))
# print(*result, sep='\n')

"""
Треугольник Паскаля 1 🌶️
Треугольник Паскаля — бесконечная таблица биномиальных коэффициентов, имеющая треугольную форму. 
В этом треугольнике на вершине и по бокам стоят единицы. Каждое число равно сумме двух расположенных над ним чисел.

0:      1
1:     1 1
2:    1 2 1
3:   1 3 3 1
4:  1 4 6 4 1
      .....
На вход программе подается число nn. Напишите программу, которая возвращает указанную 
строку треугольника Паскаля в виде списка (нумерация строк начинается с нуля).

Формат входных данных
На вход программе подается число n , (n ≥ 0).

Формат выходных данных
Программа должна вывести указанную строку треугольника Паскаля в виде списка.

Примечание 1. Решение удобно оформить в виде функции pascal(), 
которая принимает номер строки и возвращает соответствующую строку треугольника Паскаля.

Подробнее прочитать о треугольнике Паскаля можно тут.
https://ru.wikipedia.org/wiki/Треугольник_Паскаля
"""
# n = int(input())
# matrix = list([0] * (n + 1)  for _ in range(n + 1))
# matrix[0][0] = 1

# for i in range(1, n + 1):
#     for j in range(i + 1):
#         if j == 0 or matrix[i - 1][j] == 0:
#             matrix[i][j] = 1
#         else:
#             matrix[i][j] = matrix[i - 1][j - 1] + matrix[i - 1][j]
# # matrix = matrix[1:]
# # print(*matrix, sep='\n')
# # print()
# result = list(m for m in matrix[n] if m != 0)
# print(result)

# # используя формулу
# from math import factorial
# n = int(input())
# b = []
# for i in range(n + 1):
#     b.append(int((factorial(n)) / (factorial(i) * factorial(n-i))))
# print(b)

"""
Треугольник Паскаля 2
На вход программе подается натуральное число n. Напишите программу, которая выводит первые n строк треугольника Паскаля.

Формат входных данных
На вход программе подается число n (n ≥ 1).

Формат выходных данных
Программа должна вывести первые nn строк треугольника Паскаля, каждую на отдельной строке в соответствии с образцом.
"""

# n = int(input())
# matrix = list([0] * (n + 1)  for _ in range(n + 1))
# matrix[0][0] = 1

# for i in range(1, n + 1):
#     for j in range(i + 1):
#         if j == 0 or matrix[i - 1][j] == 0:
#             matrix[i][j] = 1
#         else:
#             matrix[i][j] = matrix[i - 1][j - 1] + matrix[i - 1][j]

# for j in range(len(matrix) - 1):
#     print(*list(i for i in matrix[j] if i != 0))

"""
Упаковка дубликатов 🌶️
На вход программе подается строка текста, содержащая символы. 
Напишите программу, которая упаковывает последовательности одинаковых символов заданной строки в подсписки.

Формат входных данных
На вход программе подается строка текста, содержащая символы, отделенные символом пробела.

Формат выходных данных
Программа должна вывести указанный вложенный список.
"""

# S = input().replace(' ', '')
# string = S[0]
# for i in range(1, len(S)):
#     string += S[i] if S[i] == S[i - 1] else ' ' + S[i]
# print(list(list(s) for s in string.split()))

# from itertools import groupby
# print([list(g) for k, g in groupby(input().replace(" ", ""))])

"""
Разбиение на чанки 🌶️
На вход программе подаются две строки, на одной символы, 
на другой число n. Из первой строки формируется список.

Реализуйте функцию chunked(), которая принимает на вход список и число, 
задающее размер чанка (куска), а возвращает список из чанков указанной длины.

Формат входных данных
На вход программе подается строка текста, содержащая символы, отделенные символом пробела и число nn на отдельной строке.

Формат выходных данных
Программа должна вывести указанный вложенный список.

Примечание. Не забудьте вызвать функцию chunked(), чтобы вывести результат 😀.
"""

# S, n = input().replace(' ', ''), int(input())
# result = []
# for i in range(0, len(S), n):
#     result.append(list(S[i:i+n]))
# print(result)

"""
Подсписки списка 🌶️🌶️
Подсписок — часть другого списка. Подсписок может содержать один элемент, несколько, и даже ни одного. 
Например, [1], [2], [3] и [4] — подсписки списка [1, 2, 3, 4]. Список [2, 3] — подсписок списка [1, 2, 3, 4], 
но список [2, 4] не подсписок списка [1, 2, 3, 4], так как элементы 2 и 4 во втором списке не смежные. 
Пустой список — подсписок любого списка. Сам список — подсписок самого себя, то есть список [1, 2, 3, 4] 
подсписок списка [1, 2, 3, 4].

На вход программе подается строка текста, содержащая символы. 
Из данной строки формируется список. Напишите программу, которая выводит 
список, содержащий все возможные подсписки списка, включая пустой список.

Формат входных данных
На вход программе подается строка текста, содержащая символы, отделенные символом пробела.

Формат выходных данных
Программа должна вывести указанный список, содержащий все возможные подсписки, включая пустой список в соответствии с примерами.

Примечание. Порядок списков одинаковой длины должен соответствовать порядку их вхождения в основной список.
"""

# S = input().replace(' ', '')
# result = [[]]
# for j in range(1, len(S) + 1):
#     for i in range(0, len(S)):
#         if len(S[i:i+j]) == j:
#             result.append(list(S[i:i+j]))
# print(result)

# n = 3
# a = [[1, 2, 3], 
#      [4, 5, 6], 
#      [7, 8, 9]]

# for i in range(n):
#     for j in range(n):
#         print(a[i][j], end=' ')
#     print()

# n = 3
# a = [[1, 2, 3], 
#      [4, 5, 6], 
#      [7, 8, 9]]

# for i in range(n):
#     for j in range(n):
#         print(a[j][i], end=' ')
#     print()

# n = 3
# a = [[1, 2, 3],
#      [4, 5, 6],
#      [7, 8, 9]]

# for i in range(n):
#     for j in range(n):
#         print(a[n - i - 1][n - j - 1], end=' ')
#     print()

# n = 5
# a = [[19, 21, 33, 78, 99], 
#      [41, 53, 66, 98, 76], 
#      [79, 80, 90, 60, 20],
#      [33, 11, 45, 67, 90],
#      [45, 67, 12, 98, 23]]

# maximum = -1
# minimum = 100

# for i in range(n):
#     if a[i][i] > maximum:
#         maximum = a[i][i]
#     if a[i][n - i - 1] < minimum:
#         minimum = a[i][n - i - 1]
# print(minimum + maximum)

"""
Вывести матрицу 1
На вход программе подаются два натуральных числа n и m, каждое на отдельной строке — 
количество строк и столбцов в матрице. Далее вводятся сами элементы матрицы — 
слова, каждое на отдельной строке; подряд идут элементы сначала первой строки, затем второй, и т.д.

Напишите программу, которая сначала считывает элементы матрицы один за другим, затем выводит их в виде матрицы.

Формат входных данных
На вход программе подаются два числа n и m — количество строк и столбцов в матрице, 
далее идут  n * m слов, каждое на отдельной строке.

Формат выходных данных
Программа должна вывести считанную матрицу, разделяя ее элементы одним пробелом.
"""
# n, m = int(input()), int(input())
# matrix = [[input() for _ in range(m)] for _ in range(n)]

# for j in range(len(matrix)):
#     print(*list(i for i in matrix[j]))

"""
Вывести матрицу 2
На вход программе подаются два натуральных числа n и m, каждое на отдельной строке — 
количество строк и столбцов в матрице. Далее вводятся сами элементы матрицы — слова, 
каждое на отдельной строке; подряд идут элементы сначала первой строки, затем второй, и т.д.

Напишите программу, которая считывает элементы матрицы один за другим, 
выводит их в виде матрицы, выводит пустую строку, и снова ту же матрицу, 
но уже поменяв местами строки со столбцами: первая строка выводится как 
первый столбец, и так далее.

Формат входных данных
На вход программе подаются два числа n и m — количество строк и столбцов в матрице, 
далее идут m * m слов, каждое на отдельной строке.

Формат выходных данных
Программа должна вывести считанную матрицу, за ней пустую строку, и 
ту же матрицу, но поменяв местами строки со столбцами. 
Элементы матрицы разделять одним пробелом.
"""

# n, m = int(input()), int(input())
# matrix = [[input() for _ in range(m)] for _ in range(n)]

# for i in range(len(matrix)):
#     for j in range(len(matrix[0])):
#         print(matrix[i][j],sep=' ', end=' ')
#     print()

# print()

# for i in range(len(matrix)):
#     for j in range(len(matrix[0])):
#         print(matrix[j][i],sep=' ', end=' ')
#     print()

"""
След матрицы
Следом квадратной матрицы называется сумма элементов главной диагонали. 
Напишите программу, которая выводит след заданной квадратной матрицы.

Формат входных данных
На вход программе подаётся натуральное число n — количество строк и столбцов в матрице, 
затем элементы матрицы (целые числа) построчно через пробел.

Формат выходных данных
Программа должна вывести одно число — след заданной матрицы.
"""

# matrix = list(list(map(int, input().split())) for _ in range(int(input())))

# # for j in range(len(matrix)):
# #     print(list(i for i in matrix[j]))

# print(sum(list(matrix[i][i] for i in range(len(matrix)))))

# print(sum(int(input().split()[i]) for i in range(int(input()))))

"""
Больше среднего
Напишите программу, которая выводит количество элементов квадратной 
матрицы в каждой строке, больших среднего арифметического элементов данной строки.

Формат входных данных
На вход программе подаётся натуральное число n — количество строк и столбцов в матрице, 
затем элементы матрицы (целые числа) построчно через пробел.

Формат выходных данных
Программа должна вывести n чисел — для каждой строки количество элементов матрицы, 
больших среднего арифметического элементов данной строки.
"""

# matrix = list(list(map(int, input().split())) for _ in range(int(input())))

# result = []
# for j in range(len(matrix)):
#     result.append(len(list(i for i in matrix[j] if i > sum(matrix[j]) / len(matrix[j]))))

# print(*result, sep='\n')

"""
Напишите программу, которая выводит максимальный элемент в 
области  ниже главной диагонали (в том числе) квадратной матрицы.



Формат входных данных
На вход программе подаётся натуральное число n — количество строк и 
столбцов в матрице, затем элементы матрицы (целые числа) построчно через пробел.

Формат выходных данных
Программа должна вывести одно число — максимальный элемент в 
области  ниже главной диагонали (в том числе) квадратной матрицы.
"""

# matrix = list(list(map(int, input().split())) for _ in range(int(input())))

# result = []
# for j in range(len(matrix)):
#     result.extend((list(matrix[j][i] for i in range(len(matrix[0])) if j >= i)))

# print(max(result))

"""
Максимальный в области 2 🌶️
Напишите программу, которая выводит максимальный 
элемент в заштрихованной области квадратной матрицы.

x 0 0 0 x
x x 0 x x
x x x x x
x x 0 x x
x 0 0 0 x

Формат входных данных
На вход программе подаётся натуральное число n — количество строк
 и столбцов в матрице, затем элементы матрицы (целые числа) построчно через пробел.

Формат выходных данных
Программа должна вывести одно число — максимальный элемент в заштрихованной области квадратной матрицы.
"""

# matrix = list(list(map(int, input().split())) for _ in range(int(input())))

# result = []
# for i in range(len(matrix)):
#     for j in range(len(matrix[0])):
#         if ((i >= j and i <= len(matrix[0]) - 1 - j) 
#             or (i <= j and i >= len(matrix[0]) - 1 - j)):
#             result.append(matrix[i][j])

# print(max(result))

"""
Суммы четвертей
Квадратная матрица разбивается на четыре четверти, 
ограниченные главной и побочной диагоналями: 
верхнюю, нижнюю, левую и правую.



Напишите программу, которая вычисляет сумму элементов: 
верхней четверти; правой четверти; нижней четверти; левой четверти.

Формат входных данных
На вход программе подаётся натуральное число n — количество строк и 
столбцов в матрице, затем элементы матрицы (целые числа) построчно 
через пробел.

Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи.

Примечание. Элементы диагоналей не учитываются.
"""

# matrix = list(list(map(int, input().split())) for _ in range(int(input())))

# result = [[],[],[],[]]
# for i in range(len(matrix)):
#     for j in range(len(matrix[0])):
#         if (i < j and i < len(matrix[0]) - 1 - j):
#            result[0].append(matrix[i][j])
#         elif (i < j and i > len(matrix[0]) - 1 - j):
#            result[1].append(matrix[i][j])
#         elif(i > j and i > len(matrix[0]) - 1 - j):
#             result[2].append(matrix[i][j])
#         elif(i > j and i < len(matrix[0]) - 1 - j):
#             result[3].append(matrix[i][j])
# answer = list(sum(n) for n in result)

# print(f"""Верхняя четверть: {answer[0]}
# Правая четверть: {answer[1]}
# Нижняя четверть: {answer[2]}
# Левая четверть: {answer[3]}""")

# quarters = [['Верхняя четверть', 0], ['Правая четверть', 0], ['Левая четверть', 0], ['Нижняя четверть', 0]]
# n = int(input())
# for i in range(n):
#     for j, elem in enumerate(input().split()):
#         if i != j and i != n - 1 - j:
#             ind = (i > j) * 2 + (i > (n - 1 - j))
#             quarters[ind][1] += int(elem)
# for i in [0, 1, 3, 2]:
#     print(f'{quarters[i][0]}: {quarters[i][1]}')

"""
Таблица умножения
На вход программе подаются два натуральных числа n и m — количество строк и столбцов в матрице. 
Создайте матрицу mult размером n x m и заполните её таблицей умножения по формуле mult[i][j] = i * j.

Формат входных данных
На вход программе на разных строках подаются два числа n и m — количество строк и столбцов в матрице.

Формат выходных данных
Программа должна вывести таблицу умножения отводя на вывод каждого числа ровно 3 символа 
(для этого используйте строковый метод ljust()).
"""

# n, m = int(input()), int(input())
# matrix = [[0 for _ in range(m)] for _ in range(n)]

# for i in range(1, len(matrix)):
#     for j in range(1, len(matrix[0])):
#         matrix[i][j] = i * j

# for i in matrix:
#     for j in i:
#         print(str(j).ljust(3), end='')
#     print()

"""
Максимум в таблице
На вход программе подаются два натуральных числа n и m — 
количество строк и столбцов в матрице, затем n строк 
по m целых чисел в каждой, отделенных символом пробела.

Напишите программу, которая находит индексы (строку и столбец) первого вхождения максимального элемента.

Формат входных данных
На вход программе на разных строках подаются два числа n и m — 
количество строк и столбцов в матрице, затем сами элементы матрицы построчно через пробел.

Формат выходных данных
Программа должна вывести два числа: номер строки и номер столбца, 
в которых стоит наибольший элемент таблицы. Если таких элементов 
несколько, то выводится тот, у которого меньше номер строки, а 
если номера строк равны то тот, у которого меньше номер столбца.

Примечание. Считайте, что нумерация строк и столбцов начинается с нуля.
"""
# from itertools import chain

# def search_coord(matrix, maximum):
#     for i in range(len(matrix)):
#         for j in range(len(matrix[0])):
#             if matrix[i][j] == maximum:
#                 return (i, j)


# n, m = int(input()), int(input())
# matrix = list(list(map(int, input().split())) for _ in range(n))
# maximum = max(chain(*matrix))
# print(search_coord(matrix, maximum))                

"""
Обмен столбцов
Напишите программу, которая меняет местами столбцы в матрице.

Формат входных данных
На вход программе на разных строках подаются два натуральных числа 
n и m — количество строк и столбцов в матрице, затем элементы матрицы 
построчно через пробел, затем числа i и j — номера столбцов, подлежащих обмену.

Формат выходных данных
Программа должна вывести указанную таблицу с замененными столбцами.
"""

# n, m = int(input()), int(input())
# matrix = list(list(map(int, input().split())) for _ in range(n))
# i, j = map(int, input().split())

# for row in matrix:
#     row[i], row[j] = row[j], row[i]

# for i in matrix:
#     for j in i:
#         print(j, end=' ')
#     print()

"""
Симметричная матрица
Напишите программу, которая проверяет симметричность квадратной матрицы относительно главной диагонали.

Формат входных данных
На вход программе подаётся натуральное число n — количество строк и столбцов в матрице, 
затем элементы матрицы построчно через пробел.

Формат выходных данных
Программа должна вывести YES, если матрица симметрична относительно главной диагонали, и слово NO в противном случае.
"""
# def is_symmetrical(matrix):
#     N = len(matrix)
#     for i in range(N):
#         for j in range(N):
#             if matrix[i][j] != matrix[j][i]:
#                 return False
#     return True


# matrix = list(list(map(int, input().split())) for _ in range(int(input())))

# print("YES" if is_symmetrical(matrix) else "NO")

"""
Обмен диагоналей
Дана квадратная матрица чисел. Напишите программу, которая меняет местами элементы, 
стоящие на главной и побочной диагонали, при этом каждый элемент должен остаться в 
том же столбце (то есть в каждом столбце нужно поменять местами элемент на главной 
диагонали и на побочной диагонали).

Формат входных данных
На вход программе подаётся натуральное число n — количество строк и столбцов в матрице, 
затем элементы матрицы построчно через пробел.

Формат выходных данных
Программа должна вывести матрицу с элементами главной и побочной диагонали, 
поменявшимися своими местами.
"""

# matrix = list(list(map(int, input().split())) for _ in range(int(input())))
# N = len(matrix)
# for i in range(N):
#     matrix[i][i], matrix[N-i-1][i] = matrix[N-i-1][i], matrix[i][i]

# for i in matrix:
#     for j in i:
#         print(j, end=' ')
#     print()

"""
Зеркальное отображение
Дана квадратная матрица чисел. Напишите программу, которая зеркально отображает
 её элементы относительно горизонтальной оси симметрии.

Формат входных данных
На вход программе подаётся натуральное число n — количество строк и столбцов 
в матрице, затем элементы матрицы построчно через пробел.

Формат выходных данных
Программа должна вывести матрицу в которой зеркально отображены 
элементы относительно горизонтальной оси симметрии.
"""

# matrix = list(list(map(int, input().split())) for _ in range(int(input())))
# N = len(matrix)
# for i in range(N // 2):
#     for j in range(N):
#         matrix[i][j], matrix[N-i-1][j] = matrix[N-i-1][j], matrix[i][j]

# for i in matrix:
#     for j in i:
#         print(j, end=' ')
#     print()

# n = int(input())

# matrix = [[int(item) for item in input().split()] for _ in range(n)]
# matrix.reverse()

# for row in matrix:
#     print(*row)

"""
Поворот матрицы
Напишите программу, которая поворачивает квадратную матрицу чисел на 90 градусов по часовой стрелке.

Формат входных данных
На вход программе подаётся натуральное число n — количество строк
 и столбцов в матрице, затем элементы матрицы построчно через пробел.

Формат выходных данных
Программа должна вывести результат на экран, числа должны быть разделены одним пробелом.
"""
# matrix = list(list(map(int, input().split())) for _ in range(int(input())))
# N = len(matrix)
# result = [list('0' * N) for _ in range(N)]

# for i in range(N):
#     for j in range(N):
#         result[j][N - i - 1] =  matrix[i][j]

# for i in result:
#     for j in i:
#         print(j, end=' ')
#     print()

"""
Ходы коня
На шахматной доске 8 x 8 стоит конь. 
Напишите программу, которая отмечает положение коня на доске и все клетки, 
которые бьет конь. Клетку, где стоит конь, отметьте английской буквой N, 
клетки, которые бьет конь, отметьте символами *, остальные клетки заполните точками.

Формат входных данных
На вход программе подаются координаты коня на шахматной доске в шахматной нотации 
(то есть в виде e4, где сначала записывается номер столбца (буква от a до h, слева направо), 
затем номеру строки (цифра от 1 до 8, снизу вверх)).

Формат выходных данных
Программа должна вывести на экран изображение доски, разделяя элементы пробелами.
"""

# result = [list('.' * 8) for _ in range(8)]
# inp = input()
# iN = 8 - int(inp[1])
# jN = 'a b c d e f g h'.split().index(inp[0])
# result[iN][jN] = 'N'

# for i in range(8):
#     for j in range(8):
#         if (abs(iN - i) == 1 and abs(jN - j) == 2):
#             result[i][j] = '*'
#         if (abs(jN - j) == 1 and abs(iN - i) == 2):
#             result[i][j] = '*'
# for i in result:
#     for j in i:
#         print(j, end=' ')
#     print()

"""
Магический квадрат 🌶️
Магическим квадратом порядка n называется квадратная таблица размера n x n, 
составленная из всех чисел 1, 2, 3, ... n ** 2 так, что суммы по 
каждому столбцу, каждой строке и каждой из двух диагоналей равны между собой. 
Напишите программу, которая проверяет, является ли заданная квадратная матрица магическим квадратом.

Формат входных данных
На вход программе подаётся натуральное число n — количество строк и столбцов в матрице, 
затем элементы матрицы: n строк, по n чисел в каждой, разделённые пробелами.

Формат выходных данных
Программа должна вывести слово YES, если матрица является магическим квадратом, и слово NO в противном случае.
"""
# from itertools import chain
# matrix = list(list(map(int, input().split())) for _ in range(int(input())))
# N = len(matrix)

# result = []
# matrix_diag = []
# matrix_diag_2 = []
# for i in range(N):
#     result.append(sum(matrix[i]))
#     column_result = []
#     for j in range(N):
#         column_result.append(matrix[j][i])
#         if i == j:
#             matrix_diag.append(matrix[i][j])
#         if i == N - 1 - j:
#             matrix_diag_2.append(matrix[i][j])
#     result.append(sum(column_result))
# result.append(sum(matrix_diag))
# result.append(sum(matrix_diag_2))
# print("YES" if (len(set(result)) == 1 
#                 and list(set(result))[0] != 0 
#                 and sorted(list(chain(*matrix))) == list(range(1, N ** 2 + 1))) else "NO")

"""
Шахматная доска
На вход программе подаются два натуральных числа n и m. 
Напишите программу для создания матрицы размером n x m, заполнив её 
символами . и * в шахматном порядке. В левом верхнем углу должна стоять точка. 
Выведите полученную матрицу на экран, разделяя элементы пробелами.

Формат входных данных
На вход программе на одной строке подаются два натуральных числа n и m — количество строк и столбцов в матрице.

Формат выходных данных
Программа должна вывести матрицу, описанную в условии задачи.
"""

# N, M = map(int, input().split())

# matrix = []
# for n in range(N):
#     if n % 2:
#         matrix.append(('*.' * ((M // 2)+ 1))[:M])
#     else:
#         matrix.append(('.*' * ((M // 2)+ 1))[:M])

# for i in matrix:
#     for j in i:
#         print(j, end=' ')
#     print()

"""
Побочная диагональ
На вход программе подается натуральное число n. 
Напишите программу, которая создает матрицу размером n x n и заполняет её по следующему правилу:

числа на побочной диагонали равны 1;
числа, стоящие выше этой диагонали, равны 0;
числа, стоящие ниже этой диагонали, равны 2.
Полученную матрицу выведите на экран. Числа в строке разделяйте одним пробелом.

Формат входных данных
На вход программе подается натуральное число n — количество строк и столбцов в матрице.

Формат выходных данных
Программа должна вывести матрицу в соответствии с условием задачи.

Примечание. Побочная диагональ — это диагональ, идущая из правого верхнего в левый нижний угол матрицы.
"""
# N = int(input())
# result = [list('0' * N) for _ in range(N)]

# for i in range(N):
#     for j in range(N):
#         if i == N - j - 1:
#             result[i][j] = 1
#         elif i > N - j - 1:
#             result[i][j] = 2

# # for i in result:
# #     for j in i:
# #         print(j, end=' ')
# #     print()

# [print(*row) for row in result]


# [[print(*[0 if i + j + 1 < n else 2 if i + j + 1 > n else 1 for j in range(n)]) for i in range(n)] for n in [int(input())]]

"""
Заполнение 1
На вход программе подаются два натуральных числа n и m. 
Напишите программу, которая создает матрицу размером n x m 
и заполняет её числами от 1 до n * m в соответствии с образцом.

Формат входных данных
На вход программе на одной строке подаются два натуральных числа n и m — количество строк и столбцов в матрице.

Формат выходных данных
Программа должна вывести матрицу в соответствии с образцом.

Примечание. Для вывода элементов матрицы как в примерах, отводите 
ровно 3 символа на каждый элемент. Для этого используйте строковый 
метод ljust(). Можно обойтись и без ljust(), система примет и такое решение 😇
"""

# N, M = map(int, input().split())

# result = [list('0' * M) for _ in range(N)]
# counter = 1
# for i in range(N):
#     for j in range(M):
#         result[i][j] = counter
#         counter += 1
        
# for i in result:
#     for j in i:
#         print(str(j).ljust(3), end='')
#     print()

"""
Заполнение 2
На вход программе подаются два натуральных числа n и m. 
Напишите программу, которая создает матрицу размером n x m заполнив её в соответствии с образцом.

Формат входных данных
На вход программе на одной строке подаются два натуральных числа n и m — количество строк и столбцов в матрице.

Формат выходных данных
Программа должна вывести указанную матрицу в соответствии с образцом.

Примечание. Для вывода элементов матрицы как в примерах, отводите ровно 3 символа на каждый элемент. 
Для этого используйте строковый метод ljust(). Можно обойтись и без ljust(), система примет и такое решение 😇
"""

# N, M = map(int, input().split())

# result = [list('0' * M) for _ in range(N)]
# counter = 1
# for i in range(M):
#     for j in range(N):
#         result[j][i] = counter
#         counter += 1
        
# for i in result:
#     for j in i:
#         print(str(j).ljust(3), end='')
#     print()

"""
Заполнение 3
На вход программе подается натуральное число n. 
Напишите программу, которая создает матрицу размером n x n заполнив её в соответствии с образцом.

Формат входных данных
На вход программе подается натуральное число n — количество строк и столбцов в матрице.

Формат выходных данных
Программа должна вывести указанную матрицу в соответствии с образцом: 
разместить единицы на главной и побочной диагоналях, остальные позиции матрицы заполнить нулями.

Примечание. Для вывода элементов матрицы как в примерах, отводите ровно 3 символа на каждый элемент. 
Для этого используйте строковый метод ljust(). Можно обойтись и без ljust(), система примет и такое решение 😇
"""

# N = int(input())

# result = [list('0' * N) for _ in range(N)]
# counter = 1
# for i in range(N):
#     for j in range(N):
#         if i == j or i == N - 1 - j:
#             result[j][i] = 1
        
# for i in result:
#     for j in i:
#         print(str(j).ljust(3), end='')
#     print()

"""
Заполнение 4
На вход программе подается натуральное число n. 
Напишите программу, которая создает матрицу размером n x n заполнив её в соответствии с образцом.

1  1  1  1  1
0  1  1  1  0
0  0  1  0  0
0  1  1  1  0
1  1  1  1  1

Формат входных данных
На вход программе подается натуральное число n — количество строк и столбцов в матрице.

Формат выходных данных
Программа должна вывести указанную матрицу в соответствии с образцом.

Примечание. Для вывода элементов матрицы как в примерах, отводите ровно 3 символа на каждый элемент. 
Для этого используйте строковый метод ljust(). Можно обойтись и без ljust(), система примет и такое решение 😇
"""

# N = int(input())

# result = [list('0' * N) for _ in range(N)]
# counter = 1
# for i in range(N):
#     for j in range(N):
#         if ((i <= j and i <= N - 1 - j) 
#             or(i >= j and i >= N - 1 - j)):
#             result[i][j] = 1
        
# for i in result:
#     for j in i:
#         print(str(j).ljust(3), end='')
#     print()

"""
Заполнение 5 🌶️
На вход программе подаются два натуральных числа n и m. 
Напишите программу, которая создает матрицу размером n x m заполнив её в соответствии с образцом.

1 2 3 4 5
2 3 4 5 1
3 4 5 1 2
4 5 1 2 3
5 1 2 3 4

Формат входных данных
На вход программе на одной строке подаются два натуральных числа n и m — количество строк и столбцов в матрице.

Формат выходных данных
Программа должна вывести указанную матрицу в соответствии с образцом.

Примечание. Для вывода элементов матрицы как в примерах, отводите ровно 3 символа на каждый элемент. 
Для этого используйте строковый метод ljust(). Можно обойтись и без ljust(), система примет и такое решение 😇
"""

# N, M = map(int, input().split())

# row = list(range(1, M + 1))
# result = []

# for n in range(N):
#     result.append(row)
#     row = row[1:] + row[:1]

# for i in result:
#     for j in i:
#         print(str(j).ljust(3), end='')
#     print()

"""
Заполнение змейкой
На вход программе подаются два натуральных числа n и m. 
Напишите программу, которая создает матрицу размером n x m заполнив её "змейкой" в соответствии с образцом.

1  2  3  4  5
10 9  8  7  6
11 12 13 14 15
20 19 18 17 16
21 22 23 24 25

Формат входных данных
На вход программе на одной строке подаются два натуральных числа n и m — количество строк и столбцов в матрице.

Формат выходных данных
Программа должна вывести указанную матрицу в соответствии с образцом.

Примечание. Для вывода элементов матрицы как в примерах, отводите ровно 33 символа на каждый элемент. Для этого используйте строковый метод ljust(). Можно обойтись и без ljust(), система примет и такое решение 😇
"""

# N, M = map(int, input().split())

# result = [list('0' * M) for _ in range(N)]
# counter = 1
# for i in range(N):
#     for j in range(M):
#         if i % 2:
#             result[i][M - 1 - j] = counter
#         else:
#             result[i][j] = counter
#         counter += 1

# for i in result:
#     for j in i:
#         print(str(j).ljust(3), end='')
#     print()

"""
Заполнение диагоналями 🌶️
На вход программе подаются два натуральных числа n и m. 
Напишите программу, которая создает матрицу размером n x m заполнив её "диагоналями" в соответствии с образцом.

1  2  4  7  10
3  5  8  11 13
6  9  12 14 15

Формат входных данных
На вход программе на одной строке подаются два натуральных числа nn и mm — количество строк и столбцов в матрице.

Формат выходных данных
Программа должна вывести указанную матрицу в соответствии с образцом.

Примечание. Для вывода элементов матрицы как в примерах, отводите ровно 3 символа на каждый элемент. 
Для этого используйте строковый метод ljust(). Можно обойтись и без ljust(), система примет и такое решение 😇
"""
# # принимаем размеры матрицы
# N, M = map(int, input().split())
# # создаем скелет матрицы
# result = [list('0' * M) for _ in range(N)]
# # объявляем счетчик наполнитель
# counter = 1
# # запускаем цикл от 0 до суммы N и M, сумма координат точек на заполняемой диагонали
# # i = 0, [0][0]
# # i = 1, [0][1], [1][0]
# # i = 2, [0][2], [1][1], [2][0] и т.д.
# for i in range(N + M):
# # запускаем цикл от 0 до i + 1
# # при возрастании j до i, уменьшается i - j до 0
# # и мы получаем группу искомых координат
#     for j in range(i + 1):
# # так как пары координат выходят за границы матрицы
# # то мы отсечем все лишние координаты
#         if j in range(N) and (i - j) in range(M):
# # если координаты в области матрицы
# # записываем значение счетчика
#             result[j][i - j] = counter
# # увеличиваем счетчик
#             counter += 1
# # печатаем матрицу
# for i in result:
#     for j in i:
#         print(str(j).ljust(3), end='')
#     print()


"""
Заполнение спиралью 😈😈
На вход программе подаются два натуральных числа n и m. 
Напишите программу, которая создает матрицу размером n x m
заполнив её "спиралью" в соответствии с образцом.

1  2  3  4  5
14 15 16 17 6
13 20 19 18 7
12 11 10 9  8

Формат входных данных
На вход программе на одной строке подаются два натуральных числа n и m — количество строк и столбцов в матрице.

Формат выходных данных
Программа должна вывести матрицу в соответствии образцом.

Примечание. Для вывода элементов матрицы как в примерах, отводите ровно 3 символа на каждый элемент. 
Для этого используйте строковый метод ljust(). Можно обойтись и без ljust(), система примет и такое решение 😇
"""

# N, M = map(int, input().split())

# result = [list('0' * M) for _ in range(N)]
# left, right, up, down = 0, 0, 0, 0
# flag = 0
# counter = 1
# while (up + down < N and left + right < M):
#     if counter < (N * M + 1):
#         if flag == 0: # >
#             for i in range(left, M - right):
#                 result[up][i] = counter
#                 counter += 1
#             flag = 1
#             up += 1
#         elif flag == 1: # v
#             for i in range(up, N - down):
#                 result[i][M - right - 1] = counter
#                 counter += 1
#             flag = 2
#             right += 1
#         elif flag == 2: # <
#             for i in range(M - right -1, left - 1, -1):
#                 result[N - down - 1][i] = counter
#                 counter += 1
#             flag = 3
#             down += 1
#         elif flag == 3: # ^
#             for i in range(N - down - 1, up - 1, -1):
#                 result[i][left] = counter
#                 counter += 1
#             flag = 0
#             left += 1
#     else:
#         up +=1
#         down +=1
#         right +=1
#         left +=1
        
# for i in result:
#     for j in i:
#         print(str(j).ljust(3), end='')
#     print()

# n, m = map(int, input().split())
# a = [[0] * m for _ in range(n)]
# dr, dc, r, c = 0, 1, 0, 0

# for cnt in range(1, n * m + 1):
#     a[r][c] = cnt
    
#     if a[(r + dr) % n][(c + dc) % m]:
#         dr, dc = dc, -dr

#     r += dr
#     c += dc    
    
# for row in a:
#     print(*(f'{e:<3}' for e in row), sep='')

"""
Сложение матриц
Напишите программу для вычисления суммы двух матриц.

Формат входных данных
На вход программе подаются два натуральных числа n и m — количество 
строк и столбцов в матрицах, затем элементы первой матрицы, затем пустая строка, 
далее следуют элементы второй матрицы.

Формат выходных данных
Программа должна вывести результирующую матрицу, разделяя элементы символом пробела.
"""
# N, M = map(int, input().split())
# matrix1 = list(list(map(int, input().split())) for _ in range(N))
# string = input()
# matrix2 = list(list(map(int, input().split())) for _ in range(N))

# result = [list('0' * M) for _ in range(N)]

# for i in range(N):
#     for j in range(M):
#         result[i][j] = matrix1[i][j] + matrix2[i][j]

# for row in result:
#     print(*(f'{e:<3}' for e in row), sep='')

"""
Умножение матриц 🌶️
Напишите программу, которая перемножает две матрицы.

Формат входных данных
На вход программе подаются два натуральных числа n и m — 
количество строк и столбцов в первой матрице, затем элементы первой матрицы, 
затем пустая строка. Далее следуют числа m и k — 
количество строк и столбцов второй матрицы затем элементы второй матрицы.

Формат выходных данных
Программа должна вывести результирующую матрицу, разделяя элементы 
символом пробела.
"""

# N1, M1 = map(int, input().split())
# matrix1 = list(list(map(int, input().split())) for _ in range(N1))
# string = input()
# N2, M2 = map(int, input().split())
# matrix2 = list(list(map(int, input().split())) for _ in range(N2))

# result = [list('0' * M2) for _ in range(N1)]

# for i in range(N1):
#     for j in range(M2):
#         res = 0 
#         for k in range(M1):
#             res += matrix1[i][k] * matrix2[k][j]
#         result[i][j] = res
# for row in result:
#     print(*(f'{e:<4}' for e in row), sep='')

# Импорт библиотеки numpy для работы с матрицами.


# import numpy as np

# # Считываем первую матрицу.
# n, m = list(map(int, input().split()))
# matrix_1 = np.array([list(map(int, input().split())) for _ in range(n)]).astype(np.int64)

# # Считываем пробел-разделитель между матрицами
# input()

# # Считываем вторую матрицу.
# n, m = list(map(int, input().split()))
# matrix_2 = np.array([list(map(int, input().split())) for _ in range(n)]).astype(np.int64)

# # Вычисляем произведение матриц.
# matrix_prod = matrix_1 @ matrix_2

# # Вывод результатов.
# print(*[' '.join([f'{el}' for el in row.tolist()]) for row in matrix_prod], sep='\n')

"""
Возведение матрицы в степень 🌶️
Напишите программу, которая возводит квадратную матрицу в m-ую степень.

Формат входных данных
На вход программе подаётся натуральное число n — количество строк и столбцов 
в матрице, затем элементы матрицы, затем натуральное число mm.

Формат выходных данных
Программа должна вывести результирующую матрицу, разделяя элементы символом 
пробела.

"""


# def mult_matrix(matrix_1, matrix_2):
#     N1 = len(matrix_1)
#     M1 = len(matrix_1[0])
#     M2 = len(matrix_2[0])
#     result = list(list(map(int, ('1 ' * M2).split())) for _ in range(N1))
#     for i in range(N1):
#         for j in range(M2):
#             res = 0 
#             for k in range(M1):
#                 res += matrix_1[i][k] * matrix_2[k][j]
#             result[i][j] = res
#     return result

# def exponentiation(matrix, n):
#     N = len(matrix)
#     result = list(list(map(int, ('1 ' * N).split())) for _ in range(N))
#     if n == 0:
#         return result
#     elif n == 1:
#         return matrix
#     elif n == 2:
#         return mult_matrix(matrix, matrix)
#     else:
#         result = mult_matrix(matrix, matrix)
#         for _ in range(3, n + 1):
#             result = mult_matrix(result, matrix)
#         return result

# N = int(input())
# matrix = list(list(map(int, input().split())) for _ in range(N))
# M = int(input())

# result = exponentiation(matrix, M)

# for row in result:
#     print(*(f'{e:<5}' for e in row), sep='')

# import numpy
# a = int(input())
# matrix = [[int(j) for j in input().split()]for i in range(a)]
# for i in numpy.linalg.matrix_power(matrix, int(input())):
#     print(*i)
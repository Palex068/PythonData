# Футбол

# x = input()
# y = input()
# z = input()
# p1 = 'В сегодняшнем матче команда " '
# p2 = ' " победила команду " '
# p3 = ' " со счетом '
# print(p1 + x + p2 + y + p3 + z)


# Загадка-2
# Теперь так легко обмануть компьютер не удастся,
# нужно придумать, как получить подсказку, не
# используя команду print. Сдайте в тестирующую
# систему одну строку, которую нужно записать в
# указанное место, чтобы получить подсказку.
# Помните, print использовать нельзя!
# Код программы:

# import random

# months = ["январь", "февраль", "март", "апрель",
#           "май", "июнь", "июль", "август", "сентябрь",
#           "октябрь", "ноябрь", "декабрь"]
# secret = random.choice(months)
# # ВЫШЕ НЕПОНЯТНЫЙ КОД!
# # сейчас в переменной secret лежит загаданный месяц
# message = "Нельзя использовать лишний print!"
# # В следующую строку нужно записать решение!
# message = secret
# # В предыдущую строку нужно записать решение!
# print(message)
# print("Какой месяц я загадал?")
# solution = input()
# # НИЖЕ НЕПОНЯТНЫЙ КОД!
# # тут программа проверяет, совпал ли ответ с загаданным словом
# if secret == solution:
#     print("Точно!")
# elif solution not in months:
#     print("Это слово вообще не месяц!")
# else:
#     print("Не угадал!")


# Загадка-3

# А тут мы уже пропустили возможность получить подсказку,
# дополнительную строку можно вписать только в указанное
# свободное место. Надо придумать что-то другое!
# Как обычно, в тестирующую систему сдайте только одну строку.
# Код программы:

# import random

# months = ["январь", "февраль", "март", "апрель",
#           "май", "июнь", "июль", "август", "сентябрь",
#           "октябрь", "ноябрь", "декабрь"]
# secret = random.choice(months)
# # ВЫШЕ НЕПОНЯТНЫЙ КОД!
# # сейчас в переменной secret лежит загаданный месяц
# print("Какой месяц я загадал?")
# solution = input()
# # В следующую строку нужно записать решение!
# solution = secret
# # В предыдущую строку нужно записать решение!
# # НИЖЕ НЕПОНЯТНЫЙ КОД!
# # тут программа проверяет, совпал ли ответ с загаданным словом
# if secret == solution:
#     print("Точно!")
# elif solution not in months:
#     print("Это слово вообще не месяц!")
# else:
#     print("Не угадал!")

# Напишите программу-шаблон для вывода объявления о прибытии поезда.
# Вводятся:

# пункт отправления
# пункт прибытия
# вокзал
# время.

# Выводится объявление:

# Поезд [откуда] - [куда] прибудет на вокзал " [название] " в [время] .

# a = input()
# b = input()
# c = input()
# d = input()
# p1 = 'Поезд'
# p2 = 'прибудет на вокзал "'
# p3 = '" в'
# print(f'{p1} {a} - {b} {p2} {c} {p3} {d} .')
# # print('Поезд Нижний Новгород - Москва прибудет на вокзал " Восточный " в 12:01 .')

# ch = input()
# s1 = (ch + ' ') * 6 + ch
# s2 = ch + ' ' * 5 + ch + ' ' * 5 + ch
# print(f'{s1}\n{s2}\n{s2}\n{s1}\n{s2}\n{s2}\n{s1}')


# Непустые дубли
# Напишите программу, которая считывает две введённые
# пользователем строки, проверяет, что обе они непустые,
# и выводит меньшую из них 5 раз подряд без пробелов.
# В случае, если пустая строка была введена, выведите: Пусто!
# Используйте *.

# s1 = input()
# s2 = input()
# if s1 < s2 and s1 != "":
#     res = s1 * 5
# elif s1 > s2 and s2 != "":
#     res = s2 * 5
# else:
#     res = 'Пусто!'

# print(res)

# s1 = input()
# s2 = input()
# if s1 != 'Яндекс' or s2 != 'Питон':
#     print(f'{s1} + {s2}')
# else:
#     print('Нам сказали Яндекс + Питон не выводить!')

# По убыванию
# s1 = input()
# s2 = input()
# s3 = input()
# print(*sorted([s1, s2, s3], reverse=True), sep=', ', end='.')

# Маска

# s = input()
# if ('*' in s or '?' in s) and (' ' not in s):
#     print('Возможно маска')
# else:
#     print('Нет, это не маска!')

# Пуск-3

# a = input()
# b = input()
# c = input()
# sum = a + b + c
# if 'три' in sum and 'два' in sum and ('один' in sum or 'раз' in sum):
#     print('ПУСК')
# else:
#     print('ОШИБКА')

# a = input()

# if a in '23 24 0 1 2 3 4':
#     print('Ночь')
# elif a in '5 6 7 8 9 10':
#     print('Утро')
# elif a in '11 12 13 14 15 16 17':
#     print('День')
# elif a in '18 19 20 21 22':
#     print('Вечер')
# else:
#     print('Ошибка')

# Мы делили апельсин

# a = int(input())
# b = int(input())

# if b == 0:
#     print('Не делится!')
# else:
#     x = a % b
#     y = a // b
#     if b > 0:
#         print('Каждому по', y)
#         print('Осталось', x)

# Краска

# a = int(input())
# b = int(input())
# c = int(input())
# d = float(input())
# print((a + b) * 2 * c * d)

# Сумма цифр
# Вводится число меньшее 10000.
# Выведите сумму его цифр.
# Не используйте условный оператор.

# a = int(input())
# res = 0
# while a > 0:
#     res += a % 10
#     a //= 10
# print(res)

# Концерты

'''
Билет на концерт группы A стоит 5 тыс руб, а группы B 3 тысячи, 
билет на любую другую группу из предложенных в афише 2 тыс. 
Меломан хочет пойти на концерт одной из двух своих любимых 
групп (A или B), но не на обе вместе, а на оставшиеся деньги 
несколько раз посетить концерты других групп, чтобы с ними 
поближе познакомиться.

Напишите программу, которая определит количество концертов 
других групп, на которые у меломана хватит бюджета.

Вводится две строки – предложения концертов – и сумма денег на билеты.

Если в одной из строк предлагается группа A или группа B, а в другой 
что-то другое, то вывести количество билетов, которые можно купить 
на оставшуюся сумму после покупки билета на концерт любимой группы, 
предложенной в другой строке. Иначе вывести:
NOT TO GO.
'''

# a = input()
# b = input()
# c = int(input())
# res = 0

# if a == 'A':
#     res -= 5
# if b == 'A':
#     res -= 5
# if a == 'B':
#     res -= 3
# if b == 'B':
#     res -= 3

# if (res == -5 or res == -3) and (c + res) // 2 >= 0:
#     print((c + res) // 2)
# else:
#     print("NOT TO GO")

# Календарь майя (хааб)

'''
Майя имели несколько календарей для различных целей: для ритуальных 
целей использовался календарь цолькин. Одновременно с этим вёлся счёт 
времени по хааб. 

Хааб (Haab) — гражданский календарь майя. Это был солнечный календарь, 
состоящий из 365 дней. 

Хааб делится на 19 месяцев: в 18 из них было по 20 дней, а в одном — только 
5 дополнительных «дней без имён» (он добавлялся для того, чтобы общее число дней равнялось 365). 
Эти 5 дней назывались Вайеб. Они считались несчастливыми. 
Дни внутри месяца нумеруются числами от 0 до 19.

Напишите программу, которая определяет день по календарю майя.
'''

# a = int(input())
# # если ввод больше года
# if a > 365:
#     a %= 365
# # считаем количество полных месяцев
# # Почему а - 1? Потому что 20 бутылка в первом ящике (физик - Капица)
# m = (a - 1) // 20
# # Из всего дней вычтем количество дней в полных месяцах
# d = a - m * 20
# # Добавим 1 к полным месяцам вычтем 1 из количества дней
# print(f'Месяц {m + 1}, день {d - 1}.')


'''
Вы за кем?

Определите для введенного числа предыдущее нечетное. 
Введенное число гарантированно находится в диапазоне 
2 ≤ n ≤ 10000. Нельзя пользоваться условным оператором.
'''

# a = int(input())

# res = a - 1 - a % 2  # если a четное - вычтем 1 иначе 2

# print(res)

# TODO
'''
Быстрее вниз

Скатываясь по пригорку, мячик, обычно, все время увеличивает
скорость. Но может попасть в ямку или запутаться в траве. 
Определите, сколько раз его скорость увеличивалась по сравнению
с предыдущим измерением.

Напишите программу, которая считывает числа, пока не будет 
введен ноль, и выводит, сколько раз встретились числа, большие предыдущего.
'''

# m = int(input())
# # сымитируем предыдущее значение
# m0 = m
# # инициализируем счетчик 0
# res = 0
# # пока не ввели 0
# while m != 0:
#     # если введенное число больше предыдущего
#     if m0 < m:
#         # наращиваем счетчик
#         res += 1
#     # запомним предыдущее значение
#     m0 = m
#     # считаем новое значение
#     m = int(input())
# # результат
# print(res)

'''
Вторые

Быть первым в чем-то здорово и почетно. 
Но вторые тоже заслуживают внимания.

Найдите среди введенных чисел второй максимум, 
то есть число, которое было бы максимальным, 
если бы первого максимума не было.

'''

# это второй минимум))
# n = int(input())
# minimum = n
# second_minimum = n

# while abs(n) < 1000:
#     n = int(input())
#     if n < minimum:
#         second_minimum = minimum
#         minimum = n
#     elif n < second_minimum:
#         second_minimum = n
# print(second_minimum)


# n = int(input())
# # инициализируем переменные минимальными значениями
# maximum = -1000
# second_maximum = -1000

# while abs(n) < 1000:
#     # если число больше максимума
#     if n > maximum:
#         # прошлый максимум запишем во второй максимум
#         second_maximum = maximum
#         # в максимум запишем текущее значение
#         maximum = n
#     # если число меньше максимума, но больше второго максимума
#     elif n > second_maximum:
#         # во второй максимум запишем текущее значение
#         second_maximum = n
#     # считаем очередное значение
#     n = int(input())
# # выведем результат
# print(second_maximum)

'''
Средняя скорость

Для расчета времени прибытия автобуса на интересующую вас 
остановку, программе требуется знать скорость движения 
потока транспорта на данном участке. Можно измерить 
скорости нескольких транспортных средств и найти среднюю.

Напишите программу, рассчитывающую среднюю скорость по нескольким измерениям.
'''
# # считаем первое значение
# n = float(input())
# # инициализируем 0-ми результат и счетчик
# res = 0
# count = 0

# # пока не 0
# while n != 0:  # тут можно написать while n: - но пока так рано!
#     # прибавим к результату текущее значение
#     res += n
#     # увеличим счетчик
#     count += 1
#     # считаем новое значение
#     n = float(input())

# # печатаем результат
# print(res / count)

'''
Пикник

На вечеринке ожидается много гостей. 
Для их угощения готовятся бутерброды. 
Чтобы никого не обидеть, нужно, чтобы 
каждому досталось одинаковое количество.

Напишите программу, на какое количество 
гостей можно разделить все бутерброды без остатка.

Делители выведите по одному в строке в возрастающем порядке.
'''

# # считаем число
# n = int(input())
# res = 1

# # пока res меньше или равно n/2
# while res <= n // 2:
#     # если res делитель
#     if n % res == 0:
#         # печатаем результат
#         print(res)
#         # прирастим res
#     res += 1
# # выведем число n
# print(n)

'''
Богатенький Буратино

Добрые друзья убеждают Буратино, что стоит ему посадить 
свой золотой на Поле чудес, как вырастет дерево с золотыми
вместо листьев. Каждый раз на дереве вырастает в 10 раз 
больше золотых, чем было посажено. Сколько раз придется 
доверчивому деревянному человечку повторять посадку 
золотых и сбор урожая, чтобы хватило на новый домик для папы Карло?

Вводится целое число – стоимость дома.

Выведите, сколько раз нужно повторять цикл, чтобы получить
не меньше денег, чем требуется?
'''

# # считаем число
# n = int(input())

# # инициализируем результат 1 и счетчик 0
# res = 1
# count = 0
# # пока res меньше или равно n
# while res < n:
#     # увеличиваем количество монет и считаем эту итерацию
#     res *= 10
#     count += 1
# # выведем число n
# print(count)

'''
Холмы

То в гору, то с горы, то вверх, то вниз! Посчитайте, 
сколько было холмов по пути, то есть сколько раз 
число оказывалось больше соседних.

Вводятся целые числа (не меньше двух), пока не будет введено число -1.

Выведите количество чисел, больших того, что перед ним, и того, 
что после него. Первое и последнее не могут быть холмами, у них нет одного соседа.

Примечания
-1 не участвует в рассмотрении, служит признаком окончания ввода.
'''

# m1 = int(input())
# # сымитируем предыдущие значения
# m0 = m1
# m2 = m1
# # инициализируем счетчик 0
# res = 0
# # пока не ввели -1
# while m2 != -1:
#     # если "холм"
#     if m0 < m1 and m1 > m2:
#         # наращиваем счетчик
#         res += 1
#     # запомним предыдущие значения
#     m0 = m1
#     m1 = m2
#     # считаем новое значение
#     m2 = int(input())
# # результат
# print(res)

'''
Коллективный иммунитет

Говорят, чтобы противостоять новому штамму вируса, нужно, 
чтобы иммунитет был у 80% населения.

Напишите программу, которая определяет, достигли этого значения или нет.

Вводятся строки двух видов: да и нет, пока не будет введена пустая строка.

Если строк да не менее 80% от всех введенных (пустую не считать), 
вывести Достигли, иначе вывести Пока нет.
'''

# str = input()
# # инициализируем счетчик 0
# count = 0
# yes = 0
# # пока не ввели пустую строку
# while str != "":
#     if str == "да":
#         # наращиваем счетчик "да"
#         yes += 1

#     # наращиваем счетчик всего
#     count += 1
#     # считаем новое значение
#     str = input()
# # результат
# if yes / count >= 0.8:
#     print("Достигли")
# else:
#     print("Пока нет")

'''
Поле чудес

Очень секретное место, это Поле чудес! 
Лиса и Кот согласились отвести туда Буратино только с 
завязанными глазами. Но ему так хочется запомнить дорогу!

Напишите программу, которая определит, куда его в конце 
концов привели относительно начальной точки. В начальной 
точке Буратино смотрит по направлению оси y, то есть вверх.

Вводятся строки, это могут быть слова направо, налево, шаг,
а могут и какие-то другие, не связанные с перемещением.

шаг означает перемещение на единичный отрезок;
направо или налево – поворот без перемещения.

На все другие слова можно не обращать внимания. Последнее введенное слово – СТОП.

'''
